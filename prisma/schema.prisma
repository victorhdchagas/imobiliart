// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL") // uses connection pooling
    // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?       @default("/no-image.png")
    accounts      Account[]
    sessions      Session[]
    password      Password[]
    Condominium   Condominium[]

    @@map("users")
}

model Password {
    id        Int       @id @default(autoincrement())
    active    Boolean?  @default(false)
    expiresAt DateTime?
    hash      String
    user      User      @relation(fields: [userId], references: [id])
    userId    String

    @@map("passwords")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("tokens")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model Profile {
    id      Int       @id @default(autoincrement())
    name    String
    contact Contact[]

    @@map("profiles")
}

model Contact {
    id      Int           @id @default(autoincrement())
    type    types_contact
    value   String        @db.VarChar(40)
    profile Profile       @relation(fields: [profileId], references: [id])

    profileId Int

    @@map("contacts")
}

model Condominium {
    id        String   @id @default(cuid())
    name      String
    image     String?  @default("/imagens/condominio_padrao.png")
    createdBy User     @relation(fields: [userId], references: [id])
    userId    String
    address   Address? @relation(fields: [addressId], references: [id])
    addressId Int?

    @@map("condominium")
}

model Address {
    id          Int           @id @default(autoincrement())
    street      String
    complement  String
    number      String
    zip         String
    district    String
    city        String
    state       String
    Condominium Condominium[]
}

enum types_contact {
    telefone
    whatsapp

    @@map("contacttypes")
}
